// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider = "node node_modules/prisma-nestjs-graphql"
  output   = "../src/@generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Product models
model Product {
  id                String           @id @default(cuid())
  name              String
  description       String?
  type              ProductType      @default(REGULAR)
  // Relationships
  productCategory   ProductCategory? @relation(fields: [productCategoryId], references: [id])
  productCategoryId Int?
  productVariants   ProductVariant[]
  taxRate           TaxRate?         @relation(fields: [taxRateId], references: [id])
  taxRateId         Int?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model ProductVariant {
  id           String         @id @default(cuid())
  name         String
  description  String?
  sku          String?
  weight       Decimal?       @db.Decimal(10, 4)
  available    Boolean        @default(true)
  price        Decimal        @db.Decimal(12, 2)
  salePrice    Decimal?       @db.Decimal(12, 2)
  // Relationships
  productId    String
  product      Product        @relation(fields: [productId], references: [id])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  CheckoutItem CheckoutItem[]
}

// Product categories
model ProductCategory {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  // Relationships
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum ProductType {
  REGULAR
  DIGITAL
}

// Tax rate
model TaxRate {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  rate        Decimal   @db.Decimal(12, 1)
  // Relationships
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Checkout
model Checkout {
  id                String          @id @default(cuid())
  note              String?
  // Relationships
  shippingAddressId String?
  shippingAddress   Address?        @relation(name: "ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddressId  String?
  billingAddress    Address?        @relation(name: "BillingAddress", fields: [billingAddressId], references: [id])
  checkoutItem      CheckoutItem[]
  shippingMethodId  Int?
  shippingMethod    ShippingMethod? @relation(fields: [shippingMethodId], references: [id])
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model CheckoutItem {
  id         String         @id @default(cuid())
  quantity   Int            @default(1)
  // Relationships
  variantId  String
  variant    ProductVariant @relation(fields: [variantId], references: [id])
  checkoutId String
  checkout   Checkout       @relation(fields: [checkoutId], references: [id])
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

// Shipping methods
model ShippingMethod {
  id              Int        @id @default(autoincrement())
  name            String
  description     String?
  minDeliveryDays Int?
  maxDeliveryDays Int?
  price           Decimal    @db.Decimal(12, 2)
  active          Boolean    @default(true)
  // Relationships
  checkout        Checkout[]
}

// Used for user shipping and billing address
model Address {
  id                      String     @id @default(cuid())
  firstName               String
  lastName                String
  companyName             String?
  phone                   String?
  vatNumber               String?
  streetAddress           String
  zipCode                 String
  city                    String
  // Relationships
  countryId               Int
  country                 Country    @relation(fields: [countryId], references: [id])
  shippingAddressCheckout Checkout[] @relation(name: "ShippingAddress")
  billingAddressCheckout  Checkout[] @relation(name: "BillingAddress")
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @updatedAt
}

model Country {
  id        Int       @id @default(autoincrement())
  name      String
  code      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Address   Address[]
}
