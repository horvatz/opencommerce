// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

//generator nestgraphql {
//  provider = "node node_modules/prisma-nestjs-graphql"
//  output   = "../src/@generated"
//}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User
model User {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Product models
model Product {
  id          String            @id @default(cuid())
  name        String
  description String?
  type        ProductType       @default(REGULAR)
  active      Boolean           @default(true)
  // Relationships
  categories  ProductCategory[]
  variants    ProductVariant[]
  taxRate     TaxRate?          @relation(fields: [taxRateId], references: [id])
  taxRateId   Int?
  media       ProductMedia[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model ProductVariant {
  id            String         @id @default(cuid())
  name          String
  description   String?
  sku           String?        @unique
  weight        Decimal?       @db.Decimal(10, 4)
  available     Boolean        @default(true)
  price         Decimal        @db.Decimal(12, 2)
  salePrice     Decimal?       @db.Decimal(12, 2)
  active        Boolean        @default(true)
  // Relationships
  productId     String
  product       Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  checkoutItems CheckoutItem[]
}

// Product Media
model ProductMedia {
  id        String   @id @default(cuid())
  filename  String
  path      String
  metadata  String?
  // Relationships
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product? @relation(fields: [productId], references: [id])
  productId String?
}

// Product categories
model ProductCategory {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  // Relationships
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum ProductType {
  REGULAR
  DIGITAL
}

// Tax rate
model TaxRate {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  rate        Decimal   @db.Decimal(12, 1)
  active      Boolean   @default(true)
  // Relationships
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Checkout
model Checkout {
  id               String          @id @default(cuid())
  note             String?
  completed        Boolean         @default(false)
  status           CheckoutStatus  @default(OPEN)
  paymentMethod    PaymentMethod?
  email            String          @default("user@example.com")
  phone            String?
  shippingAddress  Json?
  billingAddress   Json?
  // Relationships
  items            CheckoutItem[]
  shippingMethodId String?
  shippingMethod   ShippingMethod? @relation(fields: [shippingMethodId], references: [id])
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

enum CheckoutStatus {
  OPEN
  CLOSED
  CANCELED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
}

model CheckoutItem {
  id         String         @id @default(cuid())
  quantity   Int            @default(1)
  // Relationships
  variantId  String
  variant    ProductVariant @relation(fields: [variantId], references: [id])
  checkoutId String
  checkout   Checkout       @relation(fields: [checkoutId], references: [id], onDelete: Cascade)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

// Shipping methods
model ShippingMethod {
  id              String     @id @default(cuid())
  name            String
  description     String?
  minDeliveryDays Int?
  maxDeliveryDays Int?
  price           Decimal    @db.Decimal(12, 2)
  active          Boolean    @default(true)
  // Relationships
  checkout        Checkout[]
}

model Country {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
