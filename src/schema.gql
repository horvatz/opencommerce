# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ProductCategory {
  id: ID!
  name: String!
  description: String
  products: [Product!]
}

type ProductVariant {
  id: ID!
  name: String!
  description: String
  sku: String
  weight: Decimal
  active: Boolean!
  available: Boolean!
  price: Decimal!
  salePrice: Decimal
}

"""An arbitrary-precision Decimal type"""
scalar Decimal

type ProductMedia {
  id: ID!
  filename: String!
  path: String!
  metadata: String
}

type TaxRate {
  id: ID!
  name: String!
  description: String
  rate: Decimal!
}

type Product {
  id: ID!
  name: String!
  description: String
  active: Boolean!
  type: ProductType!
  categories: [ProductCategory!]!
  variants: [ProductVariant!]
  media: [ProductMedia!]!
  taxRate: TaxRate
}

enum ProductType {
  REGULAR
  DIGITAL
}

type Country {
  id: ID!
  name: String!
  code: String!
}

type Address {
  firstName: String!
  lastName: String!
  streetAddress: String!
  zipCode: String!
  city: String!
  country: Country!
  phone: String
  companyName: String
  vatNumber: String
}

type CheckoutItem {
  id: ID!
  quantity: Int!
  variant: ProductVariant!
}

type ShippingMethod {
  id: ID!
  name: String!
  description: String
  minDeliveryDays: Int
  maxDeliveryDays: Int
  price: Decimal!
  active: Boolean!
}

type Checkout {
  id: ID!
  note: String
  completed: Boolean!
  items: [CheckoutItem!]
  email: String!
  phone: String
  shippingAddress: Address
  billingAddress: Address
  shippingMethod: ShippingMethod
  paymentMethod: PaymentMethod
  totalPrice: Decimal
  status: CheckoutStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
}

enum CheckoutStatus {
  OPEN
  CLOSED
  CANCELED
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Token {
  accessToken: String!
}

type Query {
  products: [Product!]!
  product(
    """ID of the product"""
    id: String!
  ): Product!
  checkouts(filter: CheckoutFilterInput!): [Checkout!]!
  completedCheckout(
    """ID of the checkout"""
    id: String!
  ): Checkout!
  checkout(
    """ID of the checkout"""
    id: String!
  ): Checkout!
  productVariant(
    """ID of the product variant"""
    id: String!
  ): ProductVariant!
  productCategories: [ProductCategory!]!
  productCategory(id: Int!): ProductCategory!
  taxRates: [TaxRate!]!
  taxRate(id: Int!): TaxRate!
  users: [User!]!
}

input CheckoutFilterInput {
  status: CheckoutStatus
}

type Mutation {
  productCreate(product: CreateProductInput!): Product!
  productUpdate(
    """ID of the product"""
    id: String!

    """Product data to update"""
    product: UpdateProductInput!
  ): Product!
  productRemove(
    """ID of the product"""
    id: String!
  ): Product!
  productMediaUpload(
    """The ID of the product variant to attach the media to."""
    productId: String!

    """Metadata about the media."""
    metadata: String

    """The media to attach."""
    file: Upload!
  ): Product!
  productMediaRemove(
    """ID of the product"""
    productId: String!

    """ID of the product media"""
    mediaId: String!
  ): Product!
  checkoutCreate: Checkout!
  checkoutItemAdd(
    """ID of the checkout"""
    id: String!

    """Checkout item"""
    item: CheckoutItemInput!
  ): Checkout!
  checkoutItemUpdate(
    """ID of the checkout"""
    id: String!

    """Checkout item"""
    item: CheckoutItemInput!
  ): Checkout!
  checkoutItemRemove(
    """ID of the checkout"""
    id: String!

    """ID of the checkout item"""
    variantId: String!
  ): Checkout!
  checkoutEmailAndPhoneUpdate(
    """ID of the checkout"""
    id: String!

    """Email of customer"""
    email: String!

    """Phone of customer"""
    phone: String
  ): Checkout!
  checkoutShippingAddressUpdate(
    """ID of the checkout"""
    id: String!

    """Address with pre-defined country"""
    address: CreateAddressInput!
  ): Checkout!
  checkoutBillingAddressUpdate(
    """ID of the checkout"""
    id: String!

    """Address with pre-defined country"""
    address: CreateAddressInput!
  ): Checkout!
  checkoutShippingMethodUpdate(
    """ID of the checkout"""
    id: String!

    """ID of the shipping method"""
    shippingMethodId: String!
  ): Checkout!
  checkoutPaymentMethodUpdate(
    """ID of the checkout"""
    id: String!

    """Payment method enum"""
    paymentMethod: PaymentMethod!
  ): Checkout!
  checkoutStatusUpdate(
    """ID of the checkout"""
    id: String!
    status: CheckoutStatus!
  ): Checkout!
  checkoutComplete(
    """ID of the checkout"""
    id: String!
  ): Checkout!
  productVariantCreate(productId: String!, variant: CreateProductVariantWithProductInput!): ProductVariant!
  productVariantUpdate(
    """ID of the product variant"""
    id: String!

    """Product variant data to update"""
    variant: UpdateProductVariantWithProductInput!
  ): ProductVariant!
  productVariantRemove(
    """ID of the product variant"""
    id: String!
  ): ProductVariant!
  createProductCategory(category: CreateProductCategoryInput!): ProductCategory!
  updateProductCategory(category: UpdateProductCategoryInput!, id: Int!): ProductCategory!
  removeProductCategory(id: Int!): ProductCategory!
  createTaxRate(taxRate: CreateTaxRateInput!): TaxRate!
  updateTaxRate(id: Int!, taxRate: UpdateTaxRateInput!): TaxRate!
  removeTaxRate(id: Int!): TaxRate!
  createAccessToken(user: CreateAccessTokenInput!): Token!
  createUser(user: CreateUserInput!): User!
  updateUser(id: String!, user: UpdateUserInput!): User!
  removeUser(id: String!): User!
}

input CreateProductInput {
  name: String!
  description: String

  """Type of the product (default is REGULAR), can also be DIGITAL"""
  type: ProductType
  categories: [FindProductCategoryInput!]!
  variants: [CreateProductVariantWithProductInput!]
  taxRate: FindTaxRateInput
}

input FindProductCategoryInput {
  id: Int!
  name: String
}

input CreateProductVariantWithProductInput {
  name: String!
  description: String
  sku: String
  weight: Decimal
  available: Boolean
  price: Decimal!
  salePrice: Decimal
}

input FindTaxRateInput {
  id: Int!
  name: String
  description: String
  rate: Decimal
}

input UpdateProductInput {
  name: String
  description: String

  """Type of the product (default is REGULAR), can also be DIGITAL"""
  type: ProductType
  categories: [FindProductCategoryInput!]
  variants: [CreateProductVariantWithProductInput!]
  taxRate: FindTaxRateInput
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input CheckoutItemInput {
  quantity: Int!
  variantId: String!
}

input CreateAddressInput {
  firstName: String!
  lastName: String!
  streetAddress: String!
  zipCode: String!
  city: String!

  """Pre-defined country"""
  country: CountryInput!
  companyName: String
  vatNumber: String
}

input CountryInput {
  code: String!
  name: String
}

input UpdateProductVariantWithProductInput {
  name: String
  description: String
  sku: String
  weight: Decimal
  available: Boolean
  price: Decimal
  salePrice: Decimal
}

input CreateProductCategoryInput {
  name: String!
  description: String
}

input UpdateProductCategoryInput {
  name: String
  description: String
  id: Int!
}

input CreateTaxRateInput {
  """Name of tax rate"""
  name: String!

  """Tax rate description"""
  description: String

  """Actual tax rate in deciamsl"""
  rate: Decimal!
}

input UpdateTaxRateInput {
  """Name of tax rate"""
  name: String

  """Tax rate description"""
  description: String

  """Actual tax rate in deciamsl"""
  rate: Decimal
}

input CreateAccessTokenInput {
  email: String!
  password: String!
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
}

input UpdateUserInput {
  firstName: String
  lastName: String
  email: String
  password: String
}